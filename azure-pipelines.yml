# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaHome: '/usr/lib/jvm/java-11-openjdk-amd64'
  buildConfiguration: 'Release'

steps:
# Configurar Java
- task: JavaToolInstaller@0
  inputs:
    versionSpec: '11'
    jdkArchitectureOption: 'x64'
    jdkSourceOption: 'PreInstalled'
    jdkFile: $(javaHome)
  displayName: 'Set up Java'

# Build e Teste para código Java
- script: |
    echo "Compilando código Java..."
    cd java_project
    ./gradlew build
  displayName: 'Compilar código Java'

- script: |
    echo "Executando testes Java..."
    cd java_project
    ./gradlew test
  displayName: 'Executar testes Java'

# Instalar .NET SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.x' # Ou a versão do .NET SDK que você está usando
    installationPath: $(Agent.ToolsDirectory)/dotnet
  displayName: 'Instalar .NET SDK'

# Build e Teste para código C#
- script: |
    echo "Compilando código C#..."
    cd ../csharp_project
    dotnet build --configuration $(buildConfiguration)
  displayName: 'Compilar código C#'

- script: |
    echo "Executando testes C#..."
    cd ../csharp_project
    dotnet test --configuration $(buildConfiguration)
  displayName: 'Executar testes C#'

# Publicar artefatos
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/java_project/build/libs'
    artifact: 'java_artifacts'
    publishLocation: 'pipeline'
  displayName: 'Publicar artefatos Java'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/csharp_project/bin/$(buildConfiguration)'
    artifact: 'csharp_artifacts'
    publishLocation: 'pipeline'
  displayName: 'Publicar artefatos C#'
